/* ***********************************************
       CONSTRUCTOR in C++
**************************************************/

// Constructor:
// -> It is a special method that is invoked automatically at the time of object creation.
// -> It is used to initialize the data members of new objects generally.
// -> Name of constructor is same as the class name without the return type.
// -> Constructor can be defined inside or outside of the class.
// -> It is generally paced  in public section of class.
// ->If not defined in the class, it will be auto generated by the compiler.
// -> Constructor can be overloaded i.e we can have more than 1 constructor in the code.
// ->Constructor can not be decleared virtual.

//Syntax:
class Point{
    int a;
    int b;
public:
    Point(); //Constructor
}
Point::Point(){
    //Constructor body
}

// Types of constructor:
// a) Default
// b) Parameterized
// c) Copy

// a) Default Constructor:
// -> It has no parameters.
// -> It is also called zero-argument constructor.
// -> If we do not define any constructor explicitly, the compiler will automatically provide a default constructor implicitly.


// b) Parameterized Constructor:
// -> It has parameters passed generally for object initialization.
// -> When parameterized constructor is defined and no default constructor is defined explicitly, then the compiler will not insert any default constructor.

class Point{
    private:
        int x, y;
    public:
        Point(int x1, int y1){
            x = x1;
            y = y1;
        }
};

int main(){
    //Parameterized constructor is called to create obj p1.
    Point p1(5,6);
    return 0;
}

// c) Copy Constructor:
// -> It is a special type of constructor which initializes an object using another object of the same class.
// -> It is also called member-wise initialization.
// -> Copy constructor can be defined explicitly by the programmer. If not defined, then complier creates one for us.


// Synatax:  
// class-name(const class-name &old_obj);


// Potential places where Copy constructor can be called
// 1) When object is passed to function by value.
// 2) When creating an object from another object of the same class.

// However, it is not guaranteed that a copy constructor will be called because of compiler optimizations like
// -> Return Value Optimization(RVO)


// Default copy constructor vs user defined copy constructor
// -> Default copy constructor does only shallow copy i.e copied object is pointing to the same location from which it has got created.
// -> User defined copy constructor does deep copy i.e copied object is pointing to new memory location.

//   obj A has x data member at location 2000, obj B is created by copying A then 
//    -> in shallow copy A x and B x will point to memory location 2000
//    -> in deep copy A x will point to 2000 and B x will point to different memory location lets say 3000.


class Point{
    private:
        int x, y;
    public:
        Point(int x1, int y1){
            x = x1;
            y = y1;
        }

        Point(const Point& p1){
            x = p1.x;
            y = p1.y;
        }
};

int main(){
    Point p1(5,6); //Created using parameterized constructor
    Point p2 = p1; //Created using copy constructor
}






